
/* business rule */
if (window.BRadded != undefined) {

} else {
    window.BRadded = (function () {

        function uuidv4() {
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        }

        const baseOBJReset = {
            "attributes": {
                "session": 0,
                "sid": 0,
                "ag": null,
                "gd": "",
                "ins": "",
                "instyp": "",
                "insnm": "",
                "tm": { "v": null, "u": "" },
                "bp": null,
                "ps": null,
                "rr": null,
                "lt": [],
                "dx": [],
                "rx": [],
                "ph": [],
                "lth": [],
                "dxh": [],
                "rxh": [],
                "phh": [],
                "daw": null,
                "pn": []
            }

        };

        var eraseCookie = function (name) {
            try {
                document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
            } catch (error) {

            }
        };

        var returnDAWValue = (value) => {
            try {
                return value.toString() == "1" ? true : false
            } catch (error) {
                return null
            }
        }

        let baseOBJ = JSON.parse(JSON.stringify(baseOBJReset));

        var updateParameters = function (key, value) {
            try {
                key = key.trim().toLowerCase();
                switch (key) {
                    case "all":
                        baseOBJ["attributes"] = { ...baseOBJ["attributes"], ...value };
                        break;
                    case "session":
                        if (value == 1) {
                            baseOBJ = JSON.parse(JSON.stringify(baseOBJReset));
                            baseOBJ["attributes"]["session"] = 1;
                            var sid = uuidv4();
                            baseOBJ["attributes"]["sid"] = sid;
                            var expires = "";
                            var date = new Date();
                            date.setTime(date.getTime() + (30 * 60 * 1000));
                            expires = "; expires=" + date.toUTCString();
                            document.cookie = "_docereeSessionContextId" + "=" + (sid || "") + expires + "; path=/";

                        }
                        if (value == 0) {
                            baseOBJ["attributes"]["session"] = 0;
                            eraseCookie('_docereeSessionContextId');
                            eraseCookie('_docereeSessionContext');
                            baseOBJ = JSON.parse(JSON.stringify(baseOBJReset));
                        }
                        break;
                    case "age":
                        baseOBJ["attributes"]["ag"] = `${value}`;
                        break;
                    case "gender":
                        baseOBJ["attributes"]["gd"] = `${value}`;
                        break;
                    case "insurance":
                        baseOBJ["attributes"]["ins"] = `${value}`;
                        break;
                    case "insurancetype":
                        baseOBJ["attributes"]["instyp"] = value;
                        break;
                    case "insurancename":
                        baseOBJ["attributes"]["insnm"] = value;
                        break;
                    case "temperature":
                        baseOBJ["attributes"]["tm"] = { v: `${value.v}`, 'u': `${value.u}` };
                        break;
                    case "bp":
                        baseOBJ["attributes"]["bp"] = `${value}`;
                        break;
                    case "pulse":
                        baseOBJ["attributes"]["ps"] = `${value}`;
                        break;
                    case "respiration":
                        baseOBJ["attributes"]["rr"] = `${value}`;
                        break;
                    case "labtest":
                        baseOBJ["attributes"]["lt"] = value;
                        break;
                    case "diagnosis":
                        baseOBJ["attributes"]["dx"] = value;
                        break;
                    case "prescription":
                        baseOBJ["attributes"]["rx"] = value;
                        break;
                    case "pharmacy":
                        baseOBJ["attributes"]["ph"] = value;
                        break;
                    case "labtesthistory":
                        baseOBJ["attributes"]["lth"] = value;
                        break;
                    case "diagnosishistory":
                        baseOBJ["attributes"]["dxh"] = value;
                        break;
                    case "prescriptionhistory":
                        baseOBJ["attributes"]["rxh"] = value;
                        break;
                    case "pharmacyhistory":
                        baseOBJ["attributes"]["phh"] = value;
                        break;
                    case "daw":
                        baseOBJ["attributes"]["daw"] = returnDAWValue(value);;
                        break;
                    case "pharmacynotes":
                        baseOBJ["attributes"]["pn"] = value;
                        break;
                    default:

                }
            } catch (error) {
                console.log("error in updating parameters", error.message);
            };
        };

        var objGetter = function () {
            try {
                const tempAttributes = {};
                Object.keys(baseOBJ["attributes"]).map((key) => {
                    if (key === "tm" && baseOBJ["attributes"]["tm"]["v"] == null) {
                        /*to check temperature values*/
                    }
                    else if (baseOBJ["attributes"][key] == null || baseOBJ["attributes"][key] === "" || key == "session") {
                        /*to check null or empty string values or key is session*/
                    } else if (Array.isArray(baseOBJ["attributes"][key]) && baseOBJ["attributes"][key].length == 0) {
                        /*to check empty array values*/
                    } else {
                        tempAttributes[key] = baseOBJ["attributes"][key]
                    }
                });
                const baseOBJ2 = { ...baseOBJ, "attributes": { ...tempAttributes } };
                return JSON.stringify(baseOBJ2);
            } catch (error) {
                console.log("error in objGetter", error.message)
            }
        };

        var isBRActive = function () {
            try {
                const sidCookie = docereeAds.getCookie('_docereeSessionContextId');
                if (!!sidCookie) {
                    return true;
                } else {
                    eraseCookie("_docereeSessionContext");
                    return false;
                }
            } catch (error) {
                console.log("error in isBRActive", error.message)
            }
        };

        return {
            updateParameters,
            objGetter,
            isBRActive,
        }
    })()
}

/* viewabilty  */
if (typeof divObserver != 'undefined') {
} else {
    window.divObserver = (function () {
        let observer = null;
        let status = [];
        function log(msg) {
            console.log(msg);
        };

        var getCurrentUTCTime = function () {
            var d1 = new Date(); d1.toUTCString();
            return Math.floor(d1.getTime() / 1000);
        };
        var diffPixel = function (id) {
            try {
                status[id]['outTime'] = new Date().getTime();
                status[id]['timer'] = false;
                var difference = status[id]['outTime'] - status[id]['timeIn'];
                status[id]['outTime'] = 0;
                status[id]['timeIn'] = 0;
                difference = difference / 1000;
                difference = parseInt(difference);
                if (difference > 0) {
                    /* pixelFire(id, difference, 50, 0, "mrc");*/
                }
            } catch (error) {
                log(error.message);
            }
        };

        var refresh = (id) => {
            try {
                if (status && status[id]) {
                    if (status[id]['timeout'] && status[id]['timeout'] != null) {
                        clearTimeout(status[id]['timeout']);
                        status[id]['timeout'] = null;
                    }

                    if (status[id]['interval'] && status[id]['interval'] != null) {
                        clearTimeout(status[id]['interval']);
                        status[id]['interval'] = null;
                    }
                    if (status[id]['timeIn'] && status[id]['timeIn'] > 0 && status[id]['timer'] && status[id]['timer'] == true) {
                        diffPixel(id);
                    }
                    let box = document.getElementById(id);
                    observer.unobserve(box);
                }
            } catch (error) {
                log(error.message);
            }
        };

        var pixelFire = (id, time, percent, type = 0, std = "mrc") => {
            try {
                let url = status[id]['url'];
                if (type == 0) {
                    url = url.replace('_viewTotalTime', time);
                }
                else {
                    url = url.replace('{{VIEWED_TIME}}', time);
                }
                url = url.replace('{{VIEWED_PERCENTAGE}}', percent);
                url = url.replace('{{EVENT_CLIENT_TIME}}', getCurrentUTCTime());
                /* url = url.replace('_std', std);*/
                (new Image()).src = url;

            } catch (error) {
                log(error.message);
            }
        };

        var unObserver = function () {
            try {
                for (var i in status) {
                    refresh(i);
                }
            } catch (e) {
                log(e.message);
            }
        };
        var observeAgain = function () {
            try {
                for (var i in status) {
                    let box = document.getElementById(i);
                    observer.observe(box);
                }
            } catch (e) {
                log(e.message);
            }
        };


        document.addEventListener('visibilitychange', function (event) {
            try {
                if (document.hidden) {
                    unObserver();
                }
                else {
                    observeAgain();
                }
            } catch (e) {
                log(e.message);
            }
        });

        let callback = (entries) => {
            try {
                entries.forEach(entry => {
                    let id = entry.target.id;
                    if (entry.intersectionRatio >= 0.5) {
                        if (status[id]['mrcFire'] == false) {
                            if (status[id]['timeout'] == null) {
                                status[id]['timeout'] = setTimeout(() => {
                                    status[id]['mrcFire'] = true;
                                    pixelFire(id, 1, 50, 1, "mrc");

                                }, 1000);
                            }
                        }
                        if (status[id]['timer'] == false) {
                            status[id]['timeIn'] = new Date().getTime();
                            status[id]['timer'] = true;
                        }

                    } else {
                        if (status[id]['timeout'] != null) {
                            clearTimeout(status[id]['timeout']);
                            status[id]['timeout'] = null;
                        }
                        if (status[id]['timeIn'] > 0 && status[id]['timer'] == true) {
                            diffPixel(id);
                        }
                    }
                    if (entry.intersectionRatio >= status[id]['limit'] && status[id]['customEvent'] == true) {
                        if (status[id]['interval'] == null) {
                            var timeNow = status[id]['time'];
                            status[id]['interval'] = setTimeout(() => {
                                /*   pixelFire(id, timeNow, status[id]['limit'] * 100, 1, "custom");*/
                                status[id]['customEvent'] = false;
                                status[id]['interval'] = null;
                            }, timeNow * 1000);
                        }
                    }
                    else {
                        clearTimeout(status[id]['interval']);
                        status[id]['interval'] = null;
                    }
                });
            } catch (e) {
                log(e.message);
            }

        };

        var init = function () {
            try {
                if (window.IntersectionObserver) {
                    observer = new IntersectionObserver(callback, {
                        root: null,
                        threshold: [0.5]
                        /*threshold: [0.5, 0.6, 0.8, 0.7, 0.9, 1]*/
                    })
                }
                else {
                    log('IntersectionObserver not supported');
                }
            } catch (e) {
                log(e.message);
            }
        };

        var register = function (response, elementId) {
            try {
                if (response && response.hasOwnProperty('adViewedURL') && response.adViewedURL) {
                    let obj = {
                        'id': elementId,
                        'mrcFire': false,
                        'interval': null,
                        'limit': response.hasOwnProperty('minViewPercentage') ? response.minViewPercentage : null,
                        'time': response.hasOwnProperty('minViewTime') ? response.minViewTime : null,
                        'timeout': null,
                        'url': response.adViewedURL,
                        'timer': false,
                        'timeIn': 0,
                        'outTime': 0,
                        'customEvent': false
                    };

                    if (obj.limit && obj.time && obj.limit >= 50) {
                        obj.limit = obj.limit / 100;
                        obj.customEvent = true;
                    };

                    let box = document.getElementById(elementId);
                    status[elementId] = obj;
                    if (observer) {
                        observer.observe(box);
                    };
                }
            } catch (e) {
                log(e.message);
            }
        };
        init();
        return {
            register,
            refresh
        }
    })();
}

if (!!window.docereeAds && !docereeAds.hasOwnProperty('obj')) {
} else {
    var storedParams = {};
    try {
        if (!!window.docereeAds) {
            storedParams = { ...docereeAds.obj };
        }
    } catch (error) {
        onConsole(error.message);
    }

    window.docereeAds = (function () {
        const isQA = `[[IS_QA_FALSE]]`; /*[[IS_QA_FALSE]]*/
        const templateRequired = `[[SELF_VALIDATION_ENABLED]]`; /*[[SELF_VALIDATION_ENABLED]] */
        const pixelFireMacro = `[[DC_HEADER_FALSE]]`;

        var BASE_EVENT = 'https://dai.doceree.com';
        var AD_URL = "https://dai.doceree.com/drs/quest";
        var POST_URL_CURATOR = "https://dai.doceree.com/dop/curator";
        var GET_TEMPLATE_URL = "https://dai.doceree.com/dop/getHcpSelfValidation";
        var POST_HCP_VALIDATION_STATUS = "https://dai.doceree.com/dop/updateHcpSelfValidation";

        if (isQA == 'true') {
            AD_URL = 'https://qa-ad-test.doceree.com/drs/quest';
            POST_URL_CURATOR = "https://qa-identity.doceree.com/curator";
            BASE_EVENT = "https://qa-ad-test.doceree.com";
            GET_TEMPLATE_URL = "https://qa-identity.doceree.com/getHcpSelfValidation";
            POST_HCP_VALIDATION_STATUS = "https://qa-identity.doceree.com/updateHcpSelfValidation"
        }
        const COUNTRY_FETCH = 'https://dai.doceree.com/dop/cm';

        const clientId = '84'; /*this will change too 84*/
        const siteId = '281'; /*this will change too 281*/
        const MAX_AD_COUNT = 100;
        let cookieval = '';
        var adContainer = [];
        var ie9Versions = false;
        var platFormContext = {};
        var platformData = {};
        var refreshTimer = null;
        var scrollTimer = null;
        var negativeResponsedAdUnits = [];
        function strExactReplace($str, $search, $replace) {
            try {
                if (ie9Versions) {
                    return $str.split($search).join($replace);
                } else {
                    return $str.split(new RegExp("\\b" + $search + "\\b", "gi")).join($replace);
                }
            } catch (e) {
                onConsole('Error strExactReplace :' + e);
            }
        };
        /* -------------------------------- Ad fetch ------------------------------------ */
        const adSlotList = [];
        var getCurrentUTCTime = function () {
            var d1 = new Date(); d1.toUTCString();
            return Math.floor(d1.getTime() / 1000);
        };

        function getAdUnit() {
            let firstSlot = '';
            try {
                if (adSlotList.length > 0) {
                    firstSlot = adSlotList.shift();
                }
            } catch (error) {

            }
            return firstSlot;
        };

        function getPlatformContext() {
            var pd = null;
            try {
                var x = atob(getCookie('_docereePlatformContext'));
                pd = JSON.parse(x);
            } catch (error) { }
            return pd;
        };

        function returnUrl() {
            var url = '';
            try {
                url = window.top.location.href;
            } catch (error) {
                url = ''
            }
            return url;
        }

        async function fetchAD() {
            try {
                const adunit = getAdUnit();
                adContainer[adunit].adRequested = true;
                adContainer[adunit].adCount = adContainer[adunit].adCount + 1;
                var pd = getPlatformContext();
                const pageurl = returnUrl();
                if (adunit != '' && adContainer[adunit].adCount <= MAX_AD_COUNT) {
                    let obj = { ...pd, 'adunit': adunit, 'userid': getCuratorId(), pageurl };
                    /* fetch data of businessrule which to be passed in adRequested*/
                    var br = getSessionContext();
                    var active = BRadded.isBRActive();
                    if (br != null && active) {
                        obj = { ...obj, br };
                    }
                    const response = await fetch(AD_URL, {
                        method: 'POST',
                        credentials: 'include',
                        headers: {
                            'Accept': 'application/json',
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(obj)
                    });
                    const datap = await response.json();
                    if (datap && datap.hasOwnProperty('response') && datap.response.length > 0) {
                        const curatorId = getCookie("_curator_id");
                        if (datap["response"][0].hasOwnProperty("userId") && (curatorId !== datap["response"][0]["userId"])) {
                            setCookie("_curator_id", datap["response"][0]["userId"], 365);
                            fireSnycPixel(datap["response"][0]["userId"]);
                        }
                    }
                    renderAd(datap);
                }

                if (adSlotList.length > 0) {
                    fetchAD();
                }
            } catch (error) {
                onConsole("error while fetching ad: ", error.message);
            }
        };


        /* -------------------------------- Ad fetch ------------------------------------ */
        /*  ------------------------------- Ad slot registry --------------------------- */

        const callback = (entries, observer) => {
            try {

                entries.forEach((entry) => {
                    var target = entry.target;
                    if (!adContainer[target.id].adRequested) {
                        if (entry.isIntersecting) {
                            if (entry.intersectionRatio > 0) {
                                adSlotList.push(target.id);
                                fetchAD();
                            }
                        }
                    }
                });
            } catch (error) {
                onConsole("error in callback");
            }


        };



        const reset = (id) => {
            try {
                adContainer[id] = {
                    id: id,
                    isObserved: true,
                    adRequested: false,
                    timer: null,
                    adCount: 0
                };
            } catch (error) {
                onConsole('error in reset function', error);
            }
        }
        const observerForAdSlots = new IntersectionObserver(callback, { root: null, rootMargin: "0px", threshold: [.1] });
        const addAdSlotinObserver = (targetEl) => {
            try {
                for (var i = 0; i < targetEl.length; i++) {

                    if (targetEl[i] != 'undefined') {
                        var clname = targetEl[i].className;
                        var elm = document.getElementById(targetEl[i].id);
                        var p = strExactReplace(clname, 'datag', 'datagob');
                        if (adContainer.hasOwnProperty(targetEl[i].id)) {
                            clearTimeout(adContainer[targetEl[i].id]['timer']);
                        }

                        reset(targetEl[i].id);

                        var x = false;

                        // GAM Handler where ad call will be initiated on load
                        if (x) {
                            adSlotList.push(targetEl[i].id);
                            fetchAD();
                        } else {
                            observerForAdSlots.unobserve(elm);
                            observerForAdSlots.observe(elm);
                        }
                        elm.className = p;

                    }


                }
            } catch (error) {
                onConsole(error);
            }

        };


        window.addEventListener('hashchange', function () {
            getAdSlotFromPage();
        });

        scrollDebounceFunction = function () {
            try {
                scrollTimer = setTimeout(() => {
                    if (!isValidationRequired()) {
                        getAdSlotFromPage();
                    }
                }, 1000);
            } catch (error) {
                onConsole("err in debounce")
            }

        };

        document.addEventListener("scroll", () => {
            if (scrollTimer !== null) {
                clearTimeout(scrollTimer);
                scrollTimer = null;
                scrollDebounceFunction();
            } else {
                scrollDebounceFunction();
            }
        });
        const getAdSlotFromPage = () => {
            var count = 0;
            try {
                var datag = document.getElementsByClassName('datag');
                count = datag.length;
                if (datag.length > 0) {
                    addAdSlotinObserver(datag);
                }
            } catch (error) {

            }
            return count;
        };

        /* -------------------- Ad slot registry code end ------------------------------ */

        function uuid() {
            try {
                var uuid = "";
                var seed = "DE";
                var version = "V1";
                var uid = "";
                var time = new Date().getTime();
                var hashGen = s => s.split('').reduce((a, b) => (((a << 5) - a) + b.charCodeAt(0)) | 0, 0);
                var num1 = Math.abs(hashGen(window.location.href));
                var num2 = Math.abs(Date.UTC(Math.floor(Math.random() * 99)) + new Date().getTime()).toString().split("").reverse().join('').substr(0, 5);
                var num3 = performance && performance.now && Math.floor(performance.now()) || Math.floor(Math.random() * 999);
                uid = (num1 + parseInt(num2) + num3) + num3.toString(16);
                uid = uid.length == 12 ? uid : uid.substr(0, 12);
                uuid = seed + "." + version + "." + uid + "." + time;
                return uuid;
            } catch {
                onConsole(e)
            }
        }

        const renderInFrame = (ad_unit, snippet) => {
            try {
                var adunit = document.getElementById(ad_unit);
                adunit.innerHTML = '';
                var iframe = document.createElement('iframe');
                iframe.style.width = '100%';
                iframe.style.height = '100%';
                iframe.style.border = '0';
                iframe.setAttribute("scrolling", "no");
                iframe.setAttribute("frameBorder", '0');
                iframe.style.overflow = "hidden";
                iframe.id = 'ifr_' + ad_unit;
                adunit.appendChild(iframe);
                document.getElementById(iframe.id).onload = function () {
                    this.contentWindow.document.body.style.margin = 0;
                    this.contentWindow.document.body.style.padding = 0;
                };
                iframe.contentWindow.document.write(snippet);
                iframe.contentWindow.document.body.style.margin = 0;
                iframe.contentWindow.document.body.style.padding = 0;
                iframe.contentWindow.document.close();
            } catch (error) {
                onConsole(error);
            }

        };

        const getRenderedURL = (url) => {
            let x = url.replace('{{EVENT_CLIENT_TIME}}', getCurrentUTCTime());
            return x;
        };


        function emptyDiv(id) {
            try {
                var t = document.getElementById(id);
                t.innerHTML = `<p style="justify-content: center;
                align-items: center;
                display: flex;
                color: grey;
                margin: 0px;
                font-weight: 200;
                font-size: 12px;
                font-family: 'Work sans';
                letter-spacing: 2px;
                height: 100%;">Advertisement</p>`;
            } catch (error) {
                onConsole("Error in empty div", error)

            }
        };

        function callbackAd(t, status) {
            try {
                var adUnit = document.getElementById(t);
                var callback = adUnit.getAttribute("data-cb");
                if (!!callback) {
                    const ev = eval(callback);
                    if (typeof (ev) == 'function') {
                        ev(t, status);
                    } else {
                        onConsole("the callback provided is not a function");
                    }
                }
            } catch (error) {
                onConsole("The registered callback method is not available");
            }
        };

        function renderAd(data) {
            try {
                var t = null;

                if (data.hasOwnProperty('response') && data.response.length > 0 && data.response[0].status == 1) {
                    var addata = data.response[0];
                    var anchorStart = (addata.clickURL != null) ? `<a href="${addata.clickURL}" target="_blank">` : '';
                    var anchorEnd = (addata.clickURL != null) ? `</a>` : '';
                    var snippet = "";

                    const ss = ``;
                    if (addata.imagePath) {
                        snippet = `<div style="display: flex; justify-content: center; align-items: center; height: 100%;">${ss}${anchorStart}<img src=${addata.imagePath} />${anchorEnd}</div>`;
                    }
                    if (addata.script) {
                        snippet = `<div style="display: flex; justify-content: center; align-items: center; height: 100%;">${ss} ${addata.script}</div>`;
                    }
                    t = addata.adUnit;
                    // var adunit = document.getElementById(t);
                    emptyDiv(t);
                    renderInFrame(t, snippet);
                    (new Image()).src = getRenderedURL(addata.adRenderURL);
                    divObserver.refresh(t);
                    divObserver.register(data.response[0], t);
                    callbackAd(t, 1);

                } else {
                    if (data.hasOwnProperty('response') && data.response.length > 0 && data.response[0].status == -1) {
                        t = data.response[0].adUnit;
                        emptyDiv(t);
                        callbackAd(t, -1);
                    }
                }
                if (adContainer.hasOwnProperty(t) && adContainer[t]["timer"] == null) {
                    clearTimeout(adContainer[t]["timer"]);
                    adContainer[t]["timer"] = setTimeout(function () {
                        try {
                            adContainer[t]["timer"] = null;
                            adContainer[t]["adRequested"] = false;
                            if (false) {
                                adSlotList.push(t);
                                fetchAD();
                            } else {
                                const element = document.getElementById(t);
                                if (document.visibilityState == "visible") {
                                    if (!!element) {
                                        observerForAdSlots.unobserve(element);
                                        observerForAdSlots.observe(element);
                                    }
                                } else {
                                    negativeResponsedAdUnits.push(t);
                                }
                            }
                        } catch (error) {

                        }
                    }, 30000);

                }
            } catch (error) {
                onConsole(error);
            }
        };

        document.addEventListener("visibilitychange", function (event) {
            try {
                if (document.visibilityState == "visible") {
                    if (negativeResponsedAdUnits.length > 0 && refreshTimer == null) {
                        refreshTimer = setTimeout(() => {
                            clearTimeout(refreshTimer);
                            refreshTimer = null;
                            negativeResponsedAdUnits.forEach((ele) => {
                                const element = document.getElementById(ele);
                                if (!!ele) {
                                    observerForAdSlots.unobserve(element);
                                    observerForAdSlots.observe(element);
                                }
                            });
                            negativeResponsedAdUnits = [];
                        }, 1000)
                    }
                } else {
                    clearTimeout(refreshTimer);
                    refreshTimer = null;
                }
            } catch (error) {

            }
        });



        function setCookie(name, value, days) {
            var expires = "";
            if (days) {
                var date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/";
        };

        function getCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        };

        function getMetaContent(metaName) {
            var meta = "";
            try {
                const metas = document.getElementsByTagName("meta");
                for (var i = 0; i < metas.length; i++) {
                    var m = metas[i];
                    if (m.getAttribute("name") === metaName) {
                        meta = m.getAttribute("content");
                    };
                }
            } catch (e) {
                onConsole(e);
            }
            return meta;
        };

        const checkSetCurtorId = (fn) => {
            try {
                fn();
            } catch (error) {

            }
        };

        const checkDocereeId = () => {
            var isBool = false;
            try {
                var docereeId = getCookie("_docereeId");
                var curatorId = getCookie("_curator_id");
                const semCastingCookie = getCookie('_doc_tpp');
                if (docereeId) {
                    docereeId = JSON.parse(docereeId);
                }
                if(!semCastingCookie){
                    bool = true;
                }
                if (!!docereeId && docereeId.hasOwnProperty("platformUid") && !curatorId) {
                    curatorId = docereeId["platformUid"];
                    setCookie('_curator_id', curatorId, 365);
                    bool = true;
                }else {
                    if (curatorId == null) {
                        curatorId = uuid();
                        setCookie('_curator_id', curatorId, 365);
                        bool = true;
                    }
                }
                if(bool){
                    fireSnycPixel(curatorId);
                }          
            } catch (error) {
                isBool = false;
            }
        };

        /* ---------------Semcasting Work----------------- */

        const getCountryBool = async () => {
            try {
                var cmCookie = getCookie("_cm");
                if (!!cmCookie) {
                    let data = JSON.parse(atob(cmCookie));
                    if (data.hasOwnProperty("1") && data["1"]) {
                        return true;
                    }
                } else {
                    data = await getCountry();
                    if (data["1"]) {
                        return true;
                    }
                }
                return false;
            } catch (error) {
                return false
            }
        }

        const fireSnycPixel = async (curatorId) => {
            try {
                const countryCheck = await getCountryBool();
                if (pixelFireMacro != "true" && countryCheck) {
                    const imgUrlSemcast = `https://bpi.rtactivate.com/tag/?id=175857&user_id=${curatorId}`;
                    (new Image()).src = imgUrlSemcast;
                    const imgUrlThrottle = `https://thrtle.com/insync?vxii_pid=10069&vxii_pdid=${curatorId}`;
                    (new Image()).src = imgUrlThrottle;
                    setCookie('_doc_tpp', `${curatorId}`, 365);
                }
            } catch (error) {

            }
        }


        function getCuratorData(encryptedPlatformData, encryptedPartnerData) {
            var data = {};
            try {

                var platformId = 1;
                var dataSource = 1;
                var hcpContext = !!getCookie("_docereeContext")
                    ? JSON.parse(decodeURIComponent(atob(getCookie("_docereeContext"))))
                    : "";
                var refURL = !!document.referrer ? document.referrer.split("//")[1] : "";
                var pageURL = !!document.location ? document.location.href : "";
                var editorialTags = !!(kwdMeta = getMetaContent("keywords")) ? kwdMeta.split(",").map((k) => k.trim()) : [];
                var localTimestamp = new Date().toUTCString();
                var pd = getPlatformContext();
                data = {
                    cd: clientId || '',
                    sd: siteId || '',
                    pl: platformId || '',
                    hc: pd && pd.hasOwnProperty('hcpid') ? pd['hcpid'] : null,
                    sr: dataSource || '',
                    ru: refURL || '',
                    pu: pageURL || '',
                    mt: editorialTags || '',
                    el: {},
                    lt: localTimestamp || '',
                    pd: encryptedPlatformData || '',
                    qp: encryptedPartnerData || '',
                    pv: 0,
                    uid: getCuratorId() || '',
                    xid: (typeof xid == 'undefined') ? '' : xid
                };
            } catch (e) {
                onConsole(e);
            }
            return data;
        }
        function postCuratorData(encryptedPlatformData, encryptedPartnerData) {
            try {
                var p = getCuratorData(encryptedPlatformData, encryptedPartnerData);
                var postData = JSON.stringify(p);
                var xhr = new XMLHttpRequest();
                xhr.open("POST", POST_URL_CURATOR, true);
                xhr.setRequestHeader("Content-type", "application/json; charset=UTF-8");
                xhr.send(postData);

                xhr.onload = function () {
                    if (xhr.status === 201 || xhr.status === 200) {
                    } else {
                        onConsole("error: ", xhr.response);
                    }
                };
            } catch (error) {
                onConsole(error);
            }
        }

        /*userDetails object creation*/
        function setDocereePlatformContext(userObj) {
            try {
                /* platFormContext is used for quest call
                 platformData is used for curator data object*/

                if (userObj['userconsent'] !== undefined) {
                    platFormContext.consent = userObj['userconsent'];
                }

                if (userObj['email'] !== undefined) {
                    platFormContext.email = userObj['email'];
                    platformData.em = userObj['email'];
                }
                if (userObj['firstname'] !== undefined) {
                    platFormContext.firstname = userObj['firstname'];
                    platformData.nm = userObj['firstname'];
                }
                if (userObj['lastname'] !== undefined) {
                    platFormContext.lastname = userObj['lastname'];
                    if (!!platformData.nm) {
                        platformData.nm += ` ${userObj['lastname']}`;
                    } else {
                        platformData.nm = ` ${userObj['lastname']}`;
                    }
                }
                if (userObj['mobile'] !== undefined) {
                    platFormContext.mobile = userObj['mobile'];
                    platformData.mob = userObj['mobile'];
                }
                if (userObj['specialization'] !== undefined) {
                    platFormContext.specialization = userObj['specialization'];
                    platformData.sp = userObj['specialization'];
                }
                if (userObj['organization'] !== undefined) {
                    platFormContext.organization = userObj['organization'];
                    platformData.og = userObj['organization'];
                }
                if (userObj['hcpid'] !== undefined) {
                    platFormContext.hcpid = userObj['hcpid'];
                    platformData.hc = userObj['hcpid'];
                }

                if (userObj['dob'] !== undefined) {
                    platFormContext.dob = userObj['dob'];
                    platformData.dob = userObj['dob'];
                }

                if (userObj['gender'] !== undefined) {
                    platFormContext.gender = userObj['gender'];
                    platformData.gd = userObj['gender'];
                }

                if (userObj['city'] !== undefined) {
                    platFormContext.city = userObj['city'];
                    platformData.wl = userObj['city'];
                }

                if (userObj['state'] !== undefined) {
                    platFormContext.state = userObj['state'];
                }

                if (userObj['country'] !== undefined) {
                    platFormContext.country = userObj['country'];
                }

                if (userObj['zipcode'] !== undefined) {
                    platFormContext.zipcode = userObj['zipcode'];
                }

                if (userObj['hashedhcpid'] !== undefined) {
                    platFormContext.hashedhcpid = userObj['hashedhcpid'];
                    platformData.hhc = userObj['hashedhcpid'];
                }

                if (userObj['hashedemail'] !== undefined) {
                    platFormContext.hashedemail = userObj['hashedemail'];
                    platformData.hem = userObj['hashedemail'];
                }

                if (userObj['hashedmobile'] !== undefined) {
                    platFormContext.hashedmobile = userObj['hashedmobile'];
                    platformData.hmob = userObj['hashedmobile'];
                }
                var encryptedHCP = btoa(JSON.stringify(platFormContext));
                var encryptedHCPCurator = btoa(JSON.stringify(platformData));
                setCookie("_docereePlatformContext", encryptedHCP, 1);
                postCuratorData(encryptedHCPCurator, "");

            } catch (error) {
                onConsole(error)
            }
        }

        function storeSessionContext() {
            try {
                var expires = "";
                var date = new Date();
                date.setTime(date.getTime() + (30 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();

                const b = btoa(BRadded.objGetter());
                document.cookie = "_docereeSessionContext=" + b + expires + "; path=/";
            } catch (error) {

            }
        }
        function getSessionContext() {
            try {
                const b = getCookie('_docereeSessionContext');
                return b;
            } catch (error) {

            }
        }
        function createSessionContext() {
            const b = getCookie('_docereeSessionContext');
            if (b != null) {
                const obj = JSON.parse(atob(b));
                BRadded.updateParameters('all', obj.attributes);
            }
        }


        function eventCall(status, sid, hcpID, uid) {
            try {
                let eventAPI = BASE_EVENT + `/drs/nEvent?eType=4&status=${status}`;
                if (!!uid) {
                    eventAPI = eventAPI + `&uid=${uid}`;
                }
                if (!!hcpID) {
                    eventAPI = eventAPI + `&hid=${hcpID}`;
                }
                if (!!sid && sid !== 0) {
                    eventAPI = eventAPI + `&sid=${sid}`;
                    (new Image()).src = eventAPI;
                }
            } catch (error) {
                onConsole("ERROR in firing event", error.message);
            }
        }

        function add(key, value) {
            try {
                key = key.toLowerCase();
                if (key != 'userdetails') {
                    if (key != "session") {
                        /* addPlatformContext(key, value);*/
                        BRadded.updateParameters(key, value);
                        if ((key == 'diagnosis' || key == 'prescription') && BRadded.isBRActive()) {
                            var obj = {};
                            if (key == 'diagnosis') {
                                obj['dx'] = value;
                            }
                            if (key == 'prescription') {
                                obj['rx'] = value;
                            }
                            const encryptedOBJ = btoa(JSON.stringify(obj));
                            postCuratorData(encryptedOBJ, "");
                        }
                    } else {
                        var pd = getPlatformContext();
                        const hcpID = pd['hcpid'];
                        const uid = getCuratorId();
                        if (value == 1) {
                            BRadded.updateParameters(key, value);
                            const BR = JSON.parse(BRadded.objGetter());
                            const sid = BR["attributes"]["sid"];
                            eventCall(1, sid, hcpID, uid);
                        }
                        if (value == 0) {
                            const BR = JSON.parse(BRadded.objGetter());
                            const sid = BR["attributes"]["sid"];
                            eventCall(0, sid, hcpID, uid);
                            BRadded.updateParameters(key, value);
                        }
                    }
                    storeSessionContext();
                } else {
                    checkSetCurtorId(() => { setDocereePlatformContext(value) });
                }
            } catch (error) {

            }
        }

        function getCuratorId() {
            try {
                const curatorId = getCookie("_curator_id");
                if (curatorId !== null) {
                    return curatorId;
                } else {
                    return null;
                }
            } catch (error) {
                onConsole(error.message);
            }
        };

        async function getCountry() {
            try {
                const response = await fetch(COUNTRY_FETCH, {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    }
                });
                let data = await response.json();
                data = data.data;
                setCookie("_cm", data, 1);
                data = JSON.parse(atob(data));
                return data;
            } catch (error) {
                return {};
            }
        }

        function checkSlot() {
            setTimeout(() => {
                clearInterval(slotInerval);
            }, 5000);

            slotInerval = setInterval(function () {
                var aa = getAdSlotFromPage();
                if (aa > 0) {
                    clearInterval(slotInerval);
                }
            }, 500);
        };

        function addAsyncValues() {
            try {
                if (Object.keys(storedParams).length > 0) {
                    Object.keys(storedParams).map((d) => {
                        add(d, storedParams[d]);
                    })
                }
            } catch (error) {

            }
        };

        function isValidationRequired() {
            var bool = false;
            try {
                if (templateRequired != 'true') {
                } else {
                    const HCnstCookie = getCookie('HCnst');
                    if (!!HCnstCookie) {

                    } else {
                        bool = true;
                    }
                }
            } catch (error) {

            }
            return bool;
        }


        function onConsole(msg) {
            try {
                let params = new URLSearchParams(window.location.search);
                params.forEach(function (value, key) {
                    if (key == 'debugger') {
                        console.log(msg);
                    }
                });
            } catch (error) {

            }
        }

        function register() {
            try {
                checkSlot();
            } catch (error) {

            }
        }

        const getTemp2 = async (data) => {
            try {
                let nSC = atob(data.script);
                const URIFont = encodeURIComponent(data.font);
                nSC = nSC.split("[['FONTURL_VALIDATION']]").join(URIFont ? URIFont : 'Arial');
                nSC = nSC.split("[['COLOR_VALIDATION']]").join(`#${data.fontColour}`);
                nSC = nSC.split("[['FONT_VALIDATION']]").join(data.font);
                nSC = '<meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0">' + nSC;
                return nSC;
            } catch (error) {
                onConsole("Error in Temp2", error.message);
                return '';
            }

        }

        const getTemplate = () => {
            try {
                return ` <style>
            #doc-overlay {
              display: none;
              position: fixed;
              top: 0;
              left: 0;
              width: 100%;
              height: 100%;
              background: rgba(0, 0, 0, 0.5);
              justify-content: center;
              align-items: center;
              z-index: 999;
              overflow: hidden;
            }
        
            #doc-popup {
                background: #fff;
                border-radius: 10px;
                min-width: 600px;
                height: 236px;
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%, -50%);
                padding: 10px;
                box-sizing: border-box;
            }

            .top{
                position: absolute;
                left: 50%;
                top: 50%;
                transform: translate(-50%,-50%);
              }
          
              .bottom{
                position: absolute;
                left: 50%;
                bottom: 0%;
                transform: translate(-50%,0%);
              }

              @media only screen and (max-width:768px){
                #doc-popup{
                    background: #fff;
                    border-radius: 10px;
                    min-width: 900px;
                    height: 500px;
                    position: absolute;
                    left: 50%;
                    top: 50%;
                    transform: translate(-50%, -50%);
                    padding: 15px;
                    box-sizing: border-box;
                }
                .fw-600{
                    font-size:40px
                }
            }

        
           
          </style>        
            <div id="doc-overlay">
                <div id="doc-popup">            
                </div>
            </div>   
            `

            } catch (error) {

            }
        }

        function addFunctionality(data) {
            try {
                // Function to show the popup
                const sc = `
                <script>
                try{
                    function showPopup() {
                        window.top.document.getElementById('doc-overlay').style.display = 'flex';
                      }
                      function setCookie(name, value, days) {
                            var expires = "";
                            if (days) {
                                var date = new Date();
                                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                                expires = "; expires=" + date.toUTCString();
                            }
                            document.cookie = name + "=" + (value || "") + expires + "; path=/";
                        };
                  
                      // Function to hide the popup
                      function hidePopup() {
                        window.top.document.getElementById('doc-overlay').style.display = 'none';
                        window.top.document.body.style.overflow = 'auto'; // Allow scrolling again
                      }

                      function docereeRedirect(link){
                        const anchor = window.top.document.createElement('a');
                        anchor.setAttribute('href',link);
                        anchor.setAttribute('target', '_self')
                        anchor.click();
                      }
                  
                      // Event listener for the cookie settings button
                      document.getElementById('cookie-accept-btn').addEventListener('click', async function() {
                          setCookie('HCnst',1,365);
                          const obj = {
                            'siteId' : ${siteId},
                            'hcpStatus' : 1,
                            'uuid' : '${getCuratorId()}'
                        }
                        const resp = await fetch('${POST_HCP_VALIDATION_STATUS}',{
                            method: 'POST',
                            credentials: 'include',
                            headers: {
                                'Accept': 'application/json',
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(obj)
                        } );
                          if(${!!data.acceptUrl}){
                            docereeRedirect('${data.acceptUrl}');
                          }
                          window.parent.docereeAds.register();
                          hidePopup();
                      });
                      
                      document.getElementById('cookie-decline-btn').addEventListener('click', function() {
                          setCookie('HCnst','0',15);
                          if(${!!data.closeUrl}){
                            docereeRedirect('${data.closeUrl}');
                          }
                          window.parent.docereeAds.register();
                          hidePopup();
                      });
                      
                      document.getElementById('doc-close-btn').addEventListener('click', function() {
                          setCookie('HCnst',-1,0.25);
                          if(${!!data.closeUrl}){
                            docereeRedirect('${data.closeUrl}');
                          }
                          window.parent.docereeAds.register();
                          hidePopup();
                      });

                      showPopup();
                }catch(e){
                    console.log(e);
                }
                
                </script>`;

                return sc;
            } catch (e) {
                console.log(e)
            }

        }

        const checkTemplate = async () => {
            try {
                const obj = {
                    'siteId': siteId,
                    'uuid': getCuratorId()
                }
                const resp = await fetch(GET_TEMPLATE_URL, {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(obj)
                })
                let data = await resp.json();
                data = data.data;
                if (data.script !== null) {
                    const html = getTemplate();
                    document.body.innerHTML += html;
                    var iframe = document.createElement('iframe');
                    iframe.style.width = '100%';
                    iframe.style.height = '100%';
                    iframe.style.border = '0';
                    iframe.setAttribute("scrolling", "yes");
                    iframe.setAttribute("frameBorder", '0');
                    iframe.style.overflow = "hidden";
                    iframe.id = 'ifr_selfValidation';
                    var temp2 = await getTemp2(data);
                    var popup = document.getElementById('doc-popup');
                    popup.appendChild(iframe);
                    iframe.contentWindow.document.write(temp2 + addFunctionality(data));
                } else {
                    if (data.valStatus == 1) {
                        setCookie('HCnst', 1, 365);
                    } else {
                        setCookie('HCnst', 0, 15);
                    }
                    checkSlot();
                }


            } catch (error) {
                onConsole('error in check template', error.message);
            }
        }



        function init() {
            /* for GAM
                    onConsole("redirect js", window.frameElement)
                    returns null in normal case and element in GAM
             */
            addAsyncValues();
            // addPrebidScript();
            checkDocereeId();
            createSessionContext();
            if (isValidationRequired()) {
                window.addEventListener('load', checkTemplate);
            } else {
                checkSlot();
            }
        };
        init();
        return {
            add: add,
            getCookie: getCookie,
            register: register
        }
    })()
}

function getCuratorId() {
    try {
        const curatorId = docereeAds.getCookie("_curator_id");
        if (curatorId !== null) {
            return curatorId;
        } else {
            return null;
        }
    } catch (error) {
    }
};
