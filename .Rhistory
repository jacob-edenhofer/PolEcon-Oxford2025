labs(title = "Bad CDF (Gapped Noise)", x = "Outcome (o = e + ε)", y = "Cumulative Probability") +
xlim(80, 100) +
ylim(0, 1) +
theme_bw()
png(filename = file.path(figures, "CDF_Comparison.png"), width = 1600, height = 600, res = 150)
# Load libraries
library(ggplot2)
library(gridExtra)
library(dplyr)
# Set up figure directory
# figures <- file.path(getwd(), "Figures")
# if (!dir.exists(figures)) {
#   dir.create(figures)
# }
# Set seed to ensure reproducibility
set.seed(1234)
# -------- Panel 1: Good CDF (Normal noise) --------
n <- 1000
e_good <- seq(0, 180, length.out = n)
epsilon_good <- rnorm(n)
o_good <- e_good + epsilon_good
# -------- Panel 2: Bad CDF (Gapped noise) --------
e_bad <- rep(90, n)
epsilon_bad <- c(runif(n/2, -5, -2), runif(n/2, 2, 5))
epsilon_bad <- sample(epsilon_bad)
o_bad <- e_bad + epsilon_bad
# -------- Plot both CDFs --------
df_good <- data.frame(o = o_good, type = "Good")
df_bad <- data.frame(o = o_bad, type = "Bad")
df_all <- rbind(df_good, df_bad)
p1 <- ggplot(df_good, aes(x = o)) +
stat_ecdf(geom = "step", pad = FALSE, color = "blue") +
labs(title = "Good CDF (Normal Noise)", x = "Outcome (o = e + ε)", y = "Cumulative Probability") +
xlim(-30, 200) +
ylim(0, 1) +
theme_bw()
p2 <- ggplot(df_bad, aes(x = o)) +
stat_ecdf(geom = "step", pad = FALSE, color = "orange") +
labs(title = "Bad CDF (Gapped Noise)", x = "Outcome (o = e + ε)", y = "Cumulative Probability") +
xlim(80, 100) +
ylim(0, 1) +
theme_bw()
# png(filename = file.path(figures, "CDF_Comparison.png"), width = 1600, height = 600, res = 150)
grid.arrange(p1, p2, ncol = 2)
# dev.off()
# -------- Tradeoff Cutoff Plot --------
n <- 300
o_star <- seq(0, 10, length.out = n)
lambda_e <- 0.8
e <- lambda_e * o_star
marginal_cost_good <- e
marginal_cost_bad <- 1.5 * e
# Marginal benefit (normal PDF)
R <- 5
marginal_benefit <- R * dnorm(o_star - e)
df_tradeoff <- data.frame(
o_star = o_star,
marginal_benefit = marginal_benefit,
cost_good = marginal_cost_good,
cost_bad = marginal_cost_bad
)
df_tradeoff <- df_tradeoff %>%
mutate(region = case_when(
marginal_benefit >= cost_bad ~ "Both types exert effort",
marginal_benefit >= cost_good ~ "Only good type exerts effort",
TRUE ~ "No effort exerted"
))
p <- ggplot(df_tradeoff, aes(x = o_star)) +
geom_ribbon(aes(ymin = 0, ymax = 6, fill = region), alpha = 0.4) +
geom_line(aes(y = marginal_benefit, color = "Expected Marginal Benefit"), linetype = "dashed", size = 1) +
geom_line(aes(y = cost_good, color = "Good Type: Marginal Cost"), size = 1) +
geom_line(aes(y = cost_bad, color = "Bad Type: Marginal Cost"), size = 1) +
labs(title = "Impact of Cutoff o* on Incumbent Behaviour",
x = "Cutoff Level o*", y = "Marginal Values") +
scale_fill_manual(values = c(
"Both types exert effort" = "lightgreen",
"Only good type exerts effort" = "lightcoral",
"No effort exerted" = "lightgray"
)) +
scale_color_manual(values = c(
"Expected Marginal Benefit" = "blue",
"Good Type: Marginal Cost" = "green",
"Bad Type: Marginal Cost" = "red"
)) +
theme_bw() +
guides(fill = guide_legend(title = "Effort Region"),
color = guide_legend(title = "Line"))
# ggsave(filename = file.path(figures, "Tradeoff_Cutoff.png"), plot = p, width = 10, height = 6, dpi = 300)
# Load libraries
library(ggplot2)
library(gridExtra)
library(dplyr)
# Set up figure directory
# figures <- file.path(getwd(), "Figures")
# if (!dir.exists(figures)) {
#   dir.create(figures)
# }
# Set seed to ensure reproducibility
set.seed(1234)
# -------- Panel 1: Good CDF (Normal noise) --------
n <- 1000
e_good <- seq(0, 180, length.out = n)
epsilon_good <- rnorm(n)
o_good <- e_good + epsilon_good
# -------- Panel 2: Bad CDF (Gapped noise) --------
e_bad <- rep(90, n)
epsilon_bad <- c(runif(n/2, -5, -2), runif(n/2, 2, 5))
epsilon_bad <- sample(epsilon_bad)
o_bad <- e_bad + epsilon_bad
# -------- Plot both CDFs --------
df_good <- data.frame(o = o_good, type = "Good")
df_bad <- data.frame(o = o_bad, type = "Bad")
df_all <- rbind(df_good, df_bad)
p1 <- ggplot(df_good, aes(x = o)) +
stat_ecdf(geom = "step", pad = FALSE, color = "blue") +
labs(title = "Good CDF (Normal Noise)", x = "Outcome (o = e + ε)", y = "Cumulative Probability") +
xlim(-30, 200) +
ylim(0, 1) +
theme_bw()
p2 <- ggplot(df_bad, aes(x = o)) +
stat_ecdf(geom = "step", pad = FALSE, color = "orange") +
labs(title = "Bad CDF (Gapped Noise)", x = "Outcome (o = e + ε)", y = "Cumulative Probability") +
xlim(80, 100) +
ylim(0, 1) +
theme_bw()
# png(filename = file.path(figures, "CDF_Comparison.png"), width = 1600, height = 600, res = 150)
grid.arrange(p1, p2, ncol = 2)
# dev.off()
# -------- Tradeoff Cutoff Plot --------
n <- 300
o_star <- seq(0, 10, length.out = n)
lambda_e <- 0.8
e <- lambda_e * o_star
marginal_cost_good <- e
marginal_cost_bad <- 1.5 * e
# Marginal benefit (normal PDF)
R <- 5
marginal_benefit <- R * dnorm(o_star - e)
df_tradeoff <- data.frame(
o_star = o_star,
marginal_benefit = marginal_benefit,
cost_good = marginal_cost_good,
cost_bad = marginal_cost_bad
)
df_tradeoff <- df_tradeoff %>%
mutate(region = case_when(
marginal_benefit >= cost_bad ~ "Both types exert effort",
marginal_benefit >= cost_good ~ "Only good type exerts effort",
TRUE ~ "No effort exerted"
))
p <- ggplot(df_tradeoff, aes(x = o_star)) +
geom_ribbon(aes(ymin = 0, ymax = 6, fill = region), alpha = 0.4) +
geom_line(aes(y = marginal_benefit, color = "Expected Marginal Benefit"), linetype = "dashed", size = 1) +
geom_line(aes(y = cost_good, color = "Good Type: Marginal Cost"), size = 1) +
geom_line(aes(y = cost_bad, color = "Bad Type: Marginal Cost"), size = 1) +
labs(title = "Impact of Cutoff o* on Incumbent Behaviour",
x = "Cutoff Level o*", y = "Marginal Values") +
scale_fill_manual(values = c(
"Both types exert effort" = "lightgreen",
"Only good type exerts effort" = "lightcoral",
"No effort exerted" = "lightgray"
)) +
scale_color_manual(values = c(
"Expected Marginal Benefit" = "blue",
"Good Type: Marginal Cost" = "green",
"Bad Type: Marginal Cost" = "red"
)) +
theme_bw() +
guides(fill = guide_legend(title = "Effort Region"),
color = guide_legend(title = "Line"))
print(p)
# ggsave(filename = file.path(figures, "Tradeoff_Cutoff.png"), plot = p, width = 10, height = 6, dpi = 300)
# Load libraries
library(ggplot2)
library(gridExtra)
library(dplyr)
# Set up figure directory
# figures <- file.path(getwd(), "Figures")
# if (!dir.exists(figures)) {
#   dir.create(figures)
# }
# Set seed to ensure reproducibility
set.seed(1234)
# -------- Panel 1: Good CDF (Normal noise) --------
n <- 1000
e_good <- seq(0, 180, length.out = n)
epsilon_good <- rnorm(n)
o_good <- e_good + epsilon_good
# -------- Panel 2: Bad CDF (Gapped noise) --------
e_bad <- rep(90, n)
epsilon_bad <- c(runif(n/2, -5, -2), runif(n/2, 2, 5))
epsilon_bad <- sample(epsilon_bad)
o_bad <- e_bad + epsilon_bad
# -------- Plot both CDFs --------
df_good <- data.frame(o = o_good, type = "Good")
df_bad <- data.frame(o = o_bad, type = "Bad")
df_all <- rbind(df_good, df_bad)
p1 <- ggplot(df_good, aes(x = o)) +
stat_ecdf(geom = "step", pad = FALSE, color = "blue") +
labs(title = "Good CDF (Normal Noise)", x = "Outcome (o = e + ε)", y = "Cumulative Probability") +
xlim(-30, 200) +
ylim(0, 1) +
theme_bw()
p2 <- ggplot(df_bad, aes(x = o)) +
stat_ecdf(geom = "step", pad = FALSE, color = "orange") +
labs(title = "Bad CDF (Gapped Noise)", x = "Outcome (o = e + ε)", y = "Cumulative Probability") +
xlim(80, 100) +
ylim(0, 1) +
theme_bw()
# png(filename = file.path(figures, "CDF_Comparison.png"), width = 1600, height = 600, res = 150)
grid.arrange(p1, p2, ncol = 2)
# dev.off()
# -------- Tradeoff Cutoff Plot --------
n <- 300
o_star <- seq(0, 10, length.out = n)
lambda_e <- 0.8
e <- lambda_e * o_star
marginal_cost_good <- e
marginal_cost_bad <- 1.5 * e
# Marginal benefit (normal PDF)
R <- 5
marginal_benefit <- R * dnorm(o_star - e)
df_tradeoff <- data.frame(
o_star = o_star,
marginal_benefit = marginal_benefit,
cost_good = marginal_cost_good,
cost_bad = marginal_cost_bad
)
df_tradeoff <- df_tradeoff %>%
mutate(region = case_when(
marginal_benefit >= cost_bad ~ "Both types exert effort",
marginal_benefit >= cost_good ~ "Only good type exerts effort",
TRUE ~ "No effort exerted"
))
p <- ggplot(df_tradeoff, aes(x = o_star)) +
geom_ribbon(aes(ymin = 0, ymax = Inf, fill = region), alpha = 0.4) +
geom_line(aes(y = marginal_benefit, color = "Expected Marginal Benefit"), linetype = "dashed", size = 1) +
geom_line(aes(y = cost_good, color = "Good Type: Marginal Cost"), size = 1) +
geom_line(aes(y = cost_bad, color = "Bad Type: Marginal Cost"), size = 1) +
labs(title = "Impact of Cutoff o* on Incumbent Behaviour",
x = "Cutoff Level o*", y = "Marginal Values") +
scale_fill_manual(values = c(
"Both types exert effort" = "lightgreen",
"Only good type exerts effort" = "lightcoral",
"No effort exerted" = "lightgray"
)) +
scale_color_manual(values = c(
"Expected Marginal Benefit" = "blue",
"Good Type: Marginal Cost" = "green",
"Bad Type: Marginal Cost" = "red"
)) +
theme_bw() +
guides(fill = guide_legend(title = "Effort Region"),
color = guide_legend(title = "Line"))
print(p)
# ggsave(filename = file.path(figures, "Tradeoff_Cutoff.png"), plot = p, width = 10, height = 6, dpi = 300)
# Load required libraries
library(ggplot2)
library(here)
# Set up figure path
# figures <- here::here("Figures")
# if (!dir.exists(figures)) {
#   dir.create(figures)
# }
# Parameters
delta <- 0.95   # Discount factor
p <- 0.3        # Probability of violent success
c <- 2          # One-time cost of fighting
k <- 1          # Cost of political engagement
L <- 2          # Payoff from being ruled
# Stakes and probability function
stakes <- seq(0.01, 20, length.out = 500)
a <- 0.9
b <- 0.02
mu <- 5
pi <- a * exp(-b * (stakes - mu)^2)
# Compute outcomes
R <- stakes + L
V_comply <- (pi * stakes + L - k) / (1 - delta)
V_fight <- (p * R) / (1 - delta) - c
compliance_gap <- V_comply - V_fight
df <- data.frame(stakes = stakes, gap = compliance_gap)
# Identify zero crossings (approximate)
zero_stakes <- df$stakes[abs(df$gap) < 1e-5]
# Plot
p <- ggplot(df, aes(x = stakes, y = gap)) +
geom_line(size = 1.2, color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_ribbon(data = subset(df, gap > 0), aes(ymin = 0, ymax = gap), fill = "lightblue", alpha = 0.5) +
geom_ribbon(data = subset(df, gap < 0), aes(ymin = gap, ymax = 0), fill = "salmon", alpha = 0.5) +
labs(title = "Effect of Stakes on Compliance Incentives",
x = "Stakes of Election (R - L)",
y = "Compliance Incentive") +
theme_bw()
# Add vertical lines for zero crossings
if (length(zero_stakes) > 0) {
for (zs in zero_stakes) {
p <- p + geom_vline(xintercept = zs, linetype = "dashed", color = "red")
}
}
# Save plot
# ggsave(filename = here::here("Figures", "compliance_incentives.png"), plot = p, width = 9, height = 6, dpi = 300)
# Load required libraries
library(ggplot2)
library(here)
# Set up figure path
# figures <- here::here("Figures")
# if (!dir.exists(figures)) {
#   dir.create(figures)
# }
# Parameters
delta <- 0.95   # Discount factor
p <- 0.3        # Probability of violent success
c <- 2          # One-time cost of fighting
k <- 1          # Cost of political engagement
L <- 2          # Payoff from being ruled
# Stakes and probability function
stakes <- seq(0.01, 20, length.out = 500)
a <- 0.9
b <- 0.02
mu <- 5
pi <- a * exp(-b * (stakes - mu)^2)
# Compute outcomes
R <- stakes + L
V_comply <- (pi * stakes + L - k) / (1 - delta)
V_fight <- (p * R) / (1 - delta) - c
compliance_gap <- V_comply - V_fight
df <- data.frame(stakes = stakes, gap = compliance_gap)
# Identify zero crossings (approximate)
zero_stakes <- df$stakes[abs(df$gap) < 1e-5]
# Plot
p <- ggplot(df, aes(x = stakes, y = gap)) +
geom_line(size = 1.2, color = "blue") +
geom_hline(yintercept = 0, linetype = "dashed", color = "black") +
geom_ribbon(data = subset(df, gap > 0), aes(ymin = 0, ymax = gap), fill = "lightblue", alpha = 0.5) +
geom_ribbon(data = subset(df, gap < 0), aes(ymin = gap, ymax = 0), fill = "salmon", alpha = 0.5) +
labs(title = "Effect of Stakes on Compliance Incentives",
x = "Stakes of Election (R - L)",
y = "Compliance Incentive") +
theme_bw()
# Add vertical lines for zero crossings
if (length(zero_stakes) > 0) {
for (zs in zero_stakes) {
p <- p + geom_vline(xintercept = zs, linetype = "dashed", color = "red")
}
}
print(p)
# Save plot
# ggsave(filename = here::here("Figures", "compliance_incentives.png"), plot = p, width = 9, height = 6, dpi = 300)
# Load libraries
library(ggplot2)
library(here)
library(gridExtra)
# Set up figure directory
# figures <- here::here("Figures")
# if (!dir.exists(figures)) {
#   dir.create(figures)
# }
# Set up policy space
policy_space <- seq(0, 10, length.out = 500)
# Single-peaked utility
single_peaked_utility <- function(x, peak) {
- (x - peak)^2
}
# Violating utility examples
double_peaked_utility <- function(x, peak1, peak2) {
-pmin((x - peak1)^2, (x - peak2)^2)
}
flat_top_utility <- function(x, start, end) {
-pmax(abs(x - (start + end)/2) - (end - start)/2, 0)^2
}
oscillating_utility <- function(x) {
-cos(2 * pi * x / 5)^2
}
# Compute utilities
df_single <- data.frame(
x = rep(policy_space, 3),
utility = c(
single_peaked_utility(policy_space, 3),
single_peaked_utility(policy_space, 5),
single_peaked_utility(policy_space, 7)
),
voter = factor(rep(c("Voter 1 (Peak at 3)", "Voter 2 (Peak at 5)", "Voter 3 (Peak at 7)"), each = length(policy_space)))
)
df_violations <- data.frame(
x = rep(policy_space, 3),
utility = c(
double_peaked_utility(policy_space, 3, 7),
flat_top_utility(policy_space, 4, 6),
oscillating_utility(policy_space)
),
voter = factor(rep(c("Double-Peaked Voter", "Flat-Top Voter", "Oscillating Voter"), each = length(policy_space)))
)
# Plot single-peaked
p1 <- ggplot(df_single, aes(x = x, y = utility, color = voter)) +
geom_line(size = 1) +
labs(title = "Single-Peaked Preferences", x = "Policy Space", y = "Utility") +
theme_bw() +
theme(legend.title = element_blank())
# Plot violations
p2 <- ggplot(df_violations, aes(x = x, y = utility, color = voter)) +
geom_line(size = 1) +
labs(title = "Violations of Single-Peakedness", x = "Policy Space", y = "Utility") +
theme_bw() +
theme(legend.title = element_blank())
# Save side-by-side plot
# png(filename = here::here("Figures", "single_peakedness_illustration.png"), width = 1400, height = 600, res = 150)
grid.arrange(p1, p2, ncol = 2)
# dev.off()
# ---- Median Voter Theorem Plot ----
voters_ideal_points <- c(2, 4, 6, 7, 9)
median_voter <- median(voters_ideal_points)
df_median <- do.call(rbind, lapply(seq_along(voters_ideal_points), function(i) {
data.frame(
x = policy_space,
utility = single_peaked_utility(policy_space, voters_ideal_points[i]),
voter = paste("Voter", i, "(Peak at", voters_ideal_points[i], ")")
)
}))
p_median <- ggplot(df_median, aes(x = x, y = utility, color = voter)) +
geom_line(size = 1) +
geom_vline(xintercept = median_voter, linetype = "dashed", color = "black") +
annotate("text", x = median_voter + 0.3, y = max(df_median$utility), label = paste("Median Voter (Peak at", median_voter, ")"), hjust = 0) +
labs(title = "Illustration of the Median Voter Theorem", x = "Policy Space", y = "Utility") +
theme_bw() +
theme(legend.title = element_blank())
print(p_median)
# ggsave(filename = here::here("Figures", "median_voter_theorem.png"), plot = p_median, width = 10, height = 6, dpi = 300)
# Load libraries
library(ggplot2)
library(here)
library(gridExtra)
# Set up figure directory
# figures <- here::here("Figures")
# if (!dir.exists(figures)) {
#   dir.create(figures)
# }
# Set up policy space
policy_space <- seq(0, 10, length.out = 500)
# Single-peaked utility
single_peaked_utility <- function(x, peak) {
- (x - peak)^2
}
# Violating utility examples
double_peaked_utility <- function(x, peak1, peak2) {
-pmin((x - peak1)^2, (x - peak2)^2)
}
flat_top_utility <- function(x, start, end) {
-pmax(abs(x - (start + end)/2) - (end - start)/2, 0)^2
}
oscillating_utility <- function(x) {
-cos(2 * pi * x / 5)^2
}
# Compute utilities
df_single <- data.frame(
x = rep(policy_space, 3),
utility = c(
single_peaked_utility(policy_space, 3),
single_peaked_utility(policy_space, 5),
single_peaked_utility(policy_space, 7)
),
voter = factor(rep(c("Voter 1 (Peak at 3)", "Voter 2 (Peak at 5)", "Voter 3 (Peak at 7)"), each = length(policy_space)))
)
df_violations <- data.frame(
x = rep(policy_space, 3),
utility = c(
double_peaked_utility(policy_space, 3, 7),
flat_top_utility(policy_space, 4, 6),
oscillating_utility(policy_space)
),
voter = factor(rep(c("Double-Peaked Voter", "Flat-Top Voter", "Oscillating Voter"), each = length(policy_space)))
)
# Plot single-peaked
p1 <- ggplot(df_single, aes(x = x, y = utility, color = voter)) +
geom_line(size = 1) +
labs(title = "Single-Peaked Preferences", x = "Policy Space", y = "Utility") +
theme_bw() +
theme(legend.title = element_blank())
# Plot violations
p2 <- ggplot(df_violations, aes(x = x, y = utility, color = voter)) +
geom_line(size = 1) +
labs(title = "Violations of Single-Peakedness", x = "Policy Space", y = "Utility") +
theme_bw() +
theme(legend.title = element_blank())
# Save side-by-side plot
# png(filename = here::here("Figures", "single_peakedness_illustration.png"), width = 1400, height = 600, res = 150)
grid.arrange(p1, p2, ncol = 2)
# dev.off()
# ---- Median Voter Theorem Plot ----
voters_ideal_points <- c(2, 4, 6, 7, 9)
median_voter <- median(voters_ideal_points)
df_median <- do.call(rbind, lapply(seq_along(voters_ideal_points), function(i) {
data.frame(
x = policy_space,
utility = single_peaked_utility(policy_space, voters_ideal_points[i]),
voter = paste("Voter", i, "(Peak at", voters_ideal_points[i], ")")
)
}))
p_median <- ggplot(df_median, aes(x = x, y = utility, color = voter)) +
geom_line(size = 1) +
geom_vline(xintercept = median_voter, linetype = "dashed", color = "black") +
annotate("text", x = median_voter + 0.3, y = -70, label = paste("Median Voter (Peak at", median_voter, ")"), hjust = 0) +
labs(title = "Illustration of the Median Voter Theorem", x = "Policy Space", y = "Utility") +
theme_bw() +
theme(legend.title = element_blank())
print(p_median)
# ggsave(filename = here::here("Figures", "median_voter_theorem.png"), plot = p_median, width = 10, height = 6, dpi = 300)
print(here::here("Figures"))
figures
# Set up figure directory
figures <- here::here("03 Simulations", "Week1", "Figures")
figures
